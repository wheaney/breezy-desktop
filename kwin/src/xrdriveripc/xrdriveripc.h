// C++ bridge now invoking xrdriveripc via external python process
#pragma once

#include <string>
#include <map>
#include <variant>
#include <vector>
#include <optional>
#include <QString>
#include <QByteArray>

// Export header generated by CMake (GenerateExportHeader)
#ifdef __has_include
#  if __has_include("xr_driver_ipc_export.h")
#    include "xr_driver_ipc_export.h"
#  endif
#endif

#ifndef XR_DRIVER_IPC_EXPORT
#  define XR_DRIVER_IPC_EXPORT __attribute__((visibility("default")))
#endif

namespace XRStateEntry {
	inline constexpr const char *Heartbeat                            = "heartbeat";
	inline constexpr const char *HardwareId                           = "hardware_id";
	inline constexpr const char *ConnectedDeviceBrand                 = "connected_device_brand";
	inline constexpr const char *ConnectedDeviceModel                 = "connected_device_model";
	inline constexpr const char *MagnetSupported                      = "magnet_supported";
	inline constexpr const char *MagnetCalibrationType                = "magnet_calibration_type";
	inline constexpr const char *UsingMagnet                          = "using_magnet";
	inline constexpr const char *MagnetStale                          = "magnet_stale";
	inline constexpr const char *MagnetCalibrating                    = "magnet_calibrating";
	inline constexpr const char *GyroCalibrating                      = "gyro_calibrating";
	inline constexpr const char *AccelCalibrating                     = "accel_calibrating";
	inline constexpr const char *SbsModeEnabled                       = "sbs_mode_enabled";
	inline constexpr const char *SbsModeSupported                     = "sbs_mode_supported";
	inline constexpr const char *FirmwareUpdateRecommended            = "firmware_update_recommended";
	inline constexpr const char *BreezyDesktopSmoothFollowEnabled     = "breezy_desktop_smooth_follow_enabled";
	inline constexpr const char *IsGamescopeReshadeIPCConnected       = "is_gamescope_reshade_ipc_connected";
	inline constexpr const char *UiView                               = "ui_view_enabled";

	namespace UIView {
		inline constexpr const char *DriverRunning       = "driver_running";

		namespace License {
			inline constexpr const char *Tiers           = "tiers";
			inline constexpr const char *Features        = "features";
			inline constexpr const char *HardwareId      = "hardware_id";
			inline constexpr const char *ConfirmedToken  = "confirmed_token";
			inline constexpr const char *ActionNeeded    = "action_needed";
			inline constexpr const char *EnabledFeatures = "enabled_features";
		}
	}
}

namespace XRConfigEntry {
	inline constexpr const char *Disabled                          = "disabled";
	inline constexpr const char *GamescopeReshadeWaylandDisabled   = "gamescope_reshade_wayland_disabled";
	inline constexpr const char *OutputMode                        = "output_mode";
	inline constexpr const char *ExternalMode                      = "external_mode";
	inline constexpr const char *MouseSensitivity                  = "mouse_sensitivity";
	inline constexpr const char *DisplayZoom                       = "display_zoom";
	inline constexpr const char *LookAhead                         = "look_ahead";
	inline constexpr const char *SbsDisplaySize                    = "sbs_display_size";
	inline constexpr const char *SbsDisplayDistance                = "sbs_display_distance";
	inline constexpr const char *SbsContent                        = "sbs_content";
	inline constexpr const char *SbsModeStretched                  = "sbs_mode_stretched";
	inline constexpr const char *SideviewPosition                  = "sideview_position";
	inline constexpr const char *SideviewDisplaySize               = "sideview_display_size";
	inline constexpr const char *VirtualDisplaySmoothFollowEnabled = "virtual_display_smooth_follow_enabled";
	inline constexpr const char *SideviewSmoothFollowEnabled       = "sideview_smooth_follow_enabled";
	inline constexpr const char *SideviewFollowThreshold           = "sideview_follow_threshold";
	inline constexpr const char *CurvedDisplay                     = "curved_display";
	inline constexpr const char *MultiTapEnabled                   = "multi_tap_enabled";
	inline constexpr const char *SmoothFollowTrackRoll             = "smooth_follow_track_roll";
	inline constexpr const char *SmoothFollowTrackPitch            = "smooth_follow_track_pitch";
	inline constexpr const char *SmoothFollowTrackYaw              = "smooth_follow_track_yaw";
	inline constexpr const char *Debug                             = "debug";
}

// Simple variant type for config/state key values we care about
using XRValue = std::variant<std::monostate, bool, int, double, std::string>;
using XRDict  = std::map<std::string, XRValue>;

class XR_DRIVER_IPC_EXPORT XRDriverIPC {
public:
	static XRDriverIPC &instance();
	static std::string string(const XRDict &dict, const std::string &key);

	std::optional<XRDict> retrieveConfig();
	std::optional<XRDict> retrieveDriverState();
	bool writeConfig(const XRDict &configUpdate);
	bool writeControlFlags(const std::map<std::string, bool> &flags);
	bool requestToken(const std::string &email);
	bool verifyToken(const std::string &token);


private:
	XRDriverIPC() = default;
	~XRDriverIPC() = default;
	XRDriverIPC(const XRDriverIPC&) = delete;
	XRDriverIPC& operator=(const XRDriverIPC&) = delete;

	std::string configHome() const;
	QByteArray invokePython(const QString &method,
							const QByteArray &payloadJson,
							const QString &singleArg) const;

	bool m_initialized = false;
	QString m_pythonDir; // directory containing xrdriveripc.py
};
